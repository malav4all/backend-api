# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DeviceGroup {
  _id: String
  accountId: String!
  deviceGroupName: String!
  imeiData: [String!]
  createdBy: String
  updateBy: String
}

type RoleResponseType {
  _id: String!
  name: String
  description: String
  industryType: String
  isDelete: Boolean
  resources: String
}

type IndustryType {
  _id: String
  name: String!
  code: [String!]!
  description: String!
  lastUpdated: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserAccountModuleValue {
  key: String
  value: String
}

type AccountResponseType {
  _id: String!
  accountLogo: String
  accountName: String!
  industryType: IndustryType
  accountPanNo: String
  accountGstNo: String
  parentId: String
  accountAadharNo: String
  accountAddress: String!
  accountState: String
  accountCity: String
  accountContactName: String!
  accountContactEmail: String!
  accountContactMobile: String
  remarks: String
  accountAuthMobile: [String!]
  accountApiKey: String
  accountConfiguration: [UserAccountModuleValue!]!
  accountCreatedBy: String
  nodeSequence: Float
  updatedBy: String
  isDelete: Boolean
}

type User {
  _id: String!
  firstName: String!
  lastName: String!
  email: String!
  mobileNumber: String!
  userName: String!
  avatar: String!
  password: String!
  deviceGroup: JSON
  imeiList: [String!]
  active: Boolean!
  isAccountAdmin: Boolean
  isSuperAdmin: Boolean
  createdBy: String!
  createdAt: DateTime
  updatedAt: DateTime
  emailVerified: Boolean!
  mobileVerified: Boolean!
  accountId: AccountResponseType!
  roleId: RoleResponseType!
  otp: String!
  parentUserId: String!
  status: String
  roleName: String
  accountName: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type PaginatorInfo {
  count: Float
  currentPage: Float
  firstItem: Float
  hasMorePages: Boolean
  lastItem: Float
  lastPage: Float
  perPage: Float
  total: Float
}

type IndustryResponseType {
  _id: String!
  name: String
  code: String
  description: String
}

type Values {
  name: String
  permissions: [String!]!
}

type Role {
  _id: String!
  name: String!
  industryType: IndustryResponseType
  description: String!
  resources: [Values!]!
  isDelete: Boolean!
  lastUpdated: DateTime
}

type MenuItem {
  _id: String
  icon: String
  activeIcon: String
  text: String
  link: String
  pageName: String
  visibleInSidebar: Boolean
  accessToResource: [String!]
  subMenu: [MenuItem!]
}

type UserResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [User!]!
}

type LoginResponse {
  data: JSON
}

type OtpSendResponse {
  success: Float
  message: String
}

type MobileNumberExists {
  success: Float
  message: String
}

type OtpResponse {
  success: Float
  message: String
  email: String
}

type OtpLoginResponse {
  success: Float
  message: String
  data: JSON
}

type PropertyTypeAssetEntity {
  name: String
}

type GeoJsonGeometryAssetEntity {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

type GeoJsonAssetEntity {
  type: String!
  geometry: GeoJsonGeometryAssetEntity!
  properties: PropertyTypeAssetEntity
}

type AddressAssetEntityType {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

type GeozoneAsset {
  _id: String!
  name: String!
  description: String!
  locationType: String!
  mobileNumber: Float!
  address: AddressAssetEntityType!
  geoCodeData: GeoJsonAssetEntity!
  finalAddress: String!
  createdBy: String!
}

type JourneyResponseType {
  _id: String
  journeyName: String
  journeyData: [GeozoneAsset!]
  createdBy: String
  startDate: DateTime
  endDate: DateTime
  totalDistance: Float
  totalDuration: Float
}

type AssertAssingmentModuleEntity {
  _id: String
  imei: Float!
  labelName: String!
  journey: JourneyResponseType
  boxSet: String!
  createdBy: String
  updatedBy: String
}

type AssertAssingmentModuleResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [AssertAssingmentModuleEntity!]
}

type PropertyTypeEntity {
  name: String
}

type GeoJsonGeometryEntity {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

type GeoJsonEntity {
  type: String!
  geometry: GeoJsonGeometryEntity!
  properties: PropertyTypeEntity
}

type AddressEntityType {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

type Geozone {
  _id: String!
  locationId: String!
  accountId: String!
  name: String!
  description: String!
  locationType: String!
  mobileNumber: Float!
  address: AddressEntityType!
  geoCodeData: GeoJsonEntity!
  finalAddress: String!
  createdBy: String!
}

type GeozoneResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Geozone!]!
}

type Route {
  _id: String
  accountId: String
  routeId: String
  routeName: String
  routeDetails: JSON
  routesData: [String!]
  createdBy: String
  totalDistance: Float
  totalDuration: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type RouteResponseData {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Route!]!
}

type AlertEntityConfig {
  event: String
  location: JSON!
  isAlreadyGenerateAlert: Boolean
  startDate: String
  endDate: String
  startAlertTime: String
  endAlertTime: String
}

type AlertImeiTypeData {
  deviceGroupName: String
  deviceGroupId: String
  imei: [String!]
}

type AlertConfigEntityData {
  alertImeiGroup: AlertImeiTypeData
  userSelectedImei: [String!]
  alertData: [AlertEntityConfig!]
}

type Alert {
  _id: String!
  accountId: String
  alertName: String
  mobileNo: String
  alertConfig: AlertConfigEntityData
  isAllSystemAlert: Boolean
  isAlertDisable: Boolean
  createdBy: String
}

type AlertResponseData {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Alert!]!
}

type AlertReportDataType {
  time: String
  event: String
  imei: String
  accountId: String
  alertMessage: String
  latitude: String
  longitude: String
}

type AlertReport {
  totalCount: Float
  rowData: [AlertReportDataType!]!
}

type DistanceCoordinatesTypeResponse {
  latitude: String
  longitude: String
  time: String
}

type DistanceReportResponse {
  imei: String
  coordinates: [DistanceCoordinatesTypeResponse!]
}

type DistanceTrackPlayResponse {
  latitude: String
  longitude: String
  time: String
  imei: String
  bearing: String
  speed: String
}

type MapViewResponse {
  latitude: String
  longitude: String
  time: String
  imei: String
}

type DeviceGroupResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [DeviceGroup!]
}

type Industry {
  _id: String!
  name: String!
  code: [String!]!
  description: String!
  file: String!
  lastUpdated: DateTime
}

type IndustryResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Industry!]!
}

type IndustryCodeResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: Industry!
}

type CustomerModule {
  _id: String!
  name: String!
  code: String!
  description: String!
  lastUpdated: DateTime
}

type CustomerModuleResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [CustomerModule!]!
}

type IndustryTypeResponse {
  _id: String!
  name: String
  code: String
  description: String
}

type DataType {
  key: String
  value: String
}

type Account {
  _id: String!
  accountLogo: String
  accountId: String!
  accountName: String!
  industryType: IndustryTypeResponse
  accountPanNo: String
  accountGstNo: String
  parentId: String
  accountAadharNo: String
  accountAddress: String!
  accountState: String
  accountCity: String
  accountContactName: String!
  accountContactEmail: String!
  accountContactMobile: String
  remarks: String
  accountAuthMobile: [String!]
  accountApiKey: String
  accountConfiguration: [DataType!]!
  accountCreatedBy: String
  nodeSequence: Float
  tenantId: String
  updatedBy: String
  isDelete: Boolean
}

type RoleResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Role!]!
}

type AccountResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Account!]
}

type TripInformationData {
  imei: [String!]
  vehicleNo: String
  tripDate: String
  remarks: String
}

type Trip {
  _id: String!
  accountId: String!
  tripId: String!
  status: String!
  primaryAccount: String!
  tripStartDate: String
  tripEndDate: String
  tripData: [TripInformationData!]
  route: JSON!
  alertConfig: JSON!
  startPoint: JSON!
  endPoint: JSON!
  metaData: JSON
  accessAccount: [String!]
  createdBy: String!
  updatedBy: String
  createdAt: String
  lastUpdated: DateTime
}

type TripResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Trip!]!
}

type BatteryResponse {
  success: Boolean
  message: String
}

type TripMetricsResponseWrapper {
  success: Float!
  message: String!
  data: [TripMetricsResponse!]!
}

type TripMetricsResponse {
  status: String
  count: Float
}

type DeviceOnboarding {
  _id: String!
  location: String
  deviceName: String
  accountTransferBy: String
  accountId: String
  deviceOnboardingSimNo: [String!]
  deviceOnboardingIMEINumber: String
  businessModel: String
  createdBy: String
  updatedBy: String
}

type DeviceOnboardingResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [DeviceOnboarding!]
}

type DeviceOfflineGraphData {
  success: Float!
  series: [Float!]!
  labels: [String!]!
}

type XAxis {
  categories: [String!]!
}

type SeriesData {
  name: String!
  data: [Float!]!
}

type DeviceLineGraphData {
  xaxis: XAxis!
  series: [SeriesData!]!
}

type DeviceOnlineStatus {
  name: String
  accountId: String
  imei: String
  status: String
  lastPing: String
  latitude: Float!
  longitude: Float!
}

type DeviceOnlineOfflineCount {
  totalDeviceCount: Int!
  online: Int!
  offline: Int!
  data: [DeviceOnlineStatus!]!
}

type ImeiListResponse {
  success: Float!
  imeiList: [String!]!
  message: String!
}

type ValueAccountModule {
  key: String
  value: String
}

type DeviceOnboardingAccountResponseType {
  _id: String!
  accountLogo: String
  accountName: String!
  accountPanNo: String
  accountGstNo: String
  parentId: String
  accountAadharNo: String
  accountAddress: String!
  accountState: String
  accountCity: String
  accountContactName: String!
  accountContactEmail: String!
  accountContactMobile: String
  remarks: String
  accountAuthMobile: [String!]
  accountApiKey: String
  accountConfiguration: [ValueAccountModule!]!
  accountCreatedBy: String
  nodeSequence: Float
  updatedBy: String
  isDelete: Boolean
}

type DeviceOnboardingHistory {
  _id: String!
  deviceOnboardingAccount: DeviceOnboardingAccountResponseType
  deviceOnboardingSimNo: [String!]!
  deviceOnboardingIMEINumber: Float
  deviceOnboardingDate: DateTime
  deviceDeboardingDate: DateTime
  createdBy: String
  updatedBy: String
}

type DeviceSimHistory {
  _id: String!
  deviceOnboardingSimNo: [String!]!
  deviceOnboardingIMEINumber: Float
  fromDate: DateTime
  toDate: DateTime
  createdBy: String
  updatedBy: String
}

type DeviceOnboardingHistoryResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [DeviceOnboardingHistory!]
}

type DeviceSimHistoryResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [DeviceSimHistory!]
}

type LoginActivity {
  _id: String!
  loginTime: DateTime
  logoutTime: DateTime
  user: JSON!
  systemInfo: JSON
}

type LoginActivityResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [LoginActivity!]!
}

type EntityType {
  _id: String!
  accountId: String!
  name: String!
  description: String!
  createdBy: String!
  updatedBy: String!
}

type EntityTypeResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [EntityType!]!
}

type Entites {
  _id: String!
  accountId: String
  tripTypeList: [String!]
  name: String
  type: String
  address: String
  city: String
  state: String
  area: String
  district: String
  pinCode: String
  contactName: String
  contactEmail: String
  contactPhone: String
  gstIn: String
  aadharCardNo: String
  createdBy: String
  updatedBy: String
}

type EntitesResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Entites!]!
}

type UserAccess {
  _id: String!
  accountId: String!
  userId: JSON
  deviceGroup: [String!]!
  entites: [String!]!
  devicesImei: [String!]!
  createdBy: String!
  updatedBy: String!
}

type UserAccessResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [UserAccess!]!
}

type TripType {
  _id: String!
  accountId: String!
  tripName: String
  minBatteryPercentage: Float!
  tripRate: Float!
  gstPercentage: Float!
  disableField: JSON
  filtrationFelid: JSON
  createdBy: String!
  updatedBy: String!
  lastUpdated: DateTime
}

type TripTypeResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [TripType!]!
}

type DeviceModelValuesInput {
  key: String
  value: String!
}

type DeviceModelCommandInput {
  key: String
  value: String!
}

type DeviceModel {
  _id: String!
  deviceId: String!
  deviceModelName: String!
  deviceModel: String!
  deviceModelType: String
  deviceModelIpAddress: String!
  deviceModelPortNumber: Float!
  deviceModelSimCount: Float!
  deviceModelNetworkType: String!
  deviceModelParser: String!
  deviceModelCommands: [DeviceModelCommandInput!]
  deviceModelConfig: [DeviceModelValuesInput!]!
  isDelete: Boolean!
  createdBy: String
  updatedBy: String
}

type DeviceModelResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [DeviceModel!]
}

type AddDevice {
  _id: String!
  imei: String!
  deviceModelCode: String!
  deviceModelName: String!
  deviceModelType: String!
  deviceId: String!
  createdBy: String!
  updatedBy: String!
}

type AddDeviceResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [AddDevice!]!
}

type MenuItemResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [MenuItem!]!
}

type LocationType {
  _id: String!
  type: String!
  createdBy: String!
}

type LocationTypeResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [LocationType!]!
}

type FormBuilder {
  _id: String
  formId: Float
  accountId: String
  name: String
  published: Boolean
  description: String
  formTitle: String
  content: JSON
  createdBy: String
  updatedBy: String
  lastUpdated: DateTime
}

type FormBuilderResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [FormBuilder!]
}

type Query {
  createUser(input: CreateUserInput!): UserResponse!
  fetchAccountList(input: AccountInput!): AccountResponse!
  menuItemListAll(input: MenuItemInput!): MenuItemResponse!
}

input CreateUserInput {
  firstName: String
  lastName: String
  email: String
  mobileNumber: String
  userName: String
  password: String
  avatar: String
  active: Boolean = false
  emailVerified: Boolean = true
  isAccountAdmin: Boolean = false
  isSuperAdmin: Boolean = false
  mobileVerified: Boolean = true
  accountId: String
  deviceGroup: JSON
  imeiList: [String!]
  roleId: String
  parentUserId: String
  industryType: String
  mainParentId: String
  status: String = "Active"
  createdBy: String
  roleName: String
  accountName: String
}

input AccountInput {
  page: Int
  limit: Int
}

input MenuItemInput {
  page: Int
  limit: Int
}

type Mutation {
  addUser(input: CreateUserInput!): UserResponse!
  forgetPassword(input: ChangePasswordInput!): UserResponse!
  changePassword(input: ChangePasswordInput!): UserResponse!
  loginUser(input: LoginUserInput!): LoginResponse!
  userListAll(input: UserInput!): UserResponse!
  updateUser(input: UpdateUserInput!): UserResponse!
  deleteUser(input: UpdateUserInput!): UserResponse!
  searchUsers(input: SearchUsersInput!): UserResponse!
  refreshToken: String!
  mobileNumberExists(input: OtpInput!): MobileNumberExists!
  verifyOtp(input: VerifyOtpInput!): OtpResponse!
  sendOtp(input: OtpInput!): OtpSendResponse!
  verifyOtpLogin(input: VerifyOtpInput!): OtpLoginResponse!
  fetchUserAccountWise(input: AccountIdInput!): UserResponse!
  createAssertAssingmentModule(input: CreateAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  updateAssertAssingmentModule(input: UpdateAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  deleteAssertAssingmentModule(input: UpdateAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  searchAssertAssingmentModule(input: SearchAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  checkAssertAssingmentModuleExistsRecord(input: CheckAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  fetchAssertAssingmentModule(input: AssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  bulkJourneyUpload(input: [CreateAssertAssingmentModuleInput!]!): AssertAssingmentModuleResponse!
  getAllDeviceList: [AssertAssingmentModuleEntity!]!
  addGeozone(input: CreateGeoZoneInput!): GeozoneResponse!
  listGeozone(input: GeozoneInput!): GeozoneResponse!
  updateGeozone(input: UpdateGeozoneInput!): GeozoneResponse!
  addRoute(input: CreateRouteInput!): RouteResponseData!
  fetchRoute(input: RouteInput!): RouteResponseData!
  updateRoute(input: UpdateRouteInput!): RouteResponseData!
  searchRoute(input: SearchRouteInput!): RouteResponseData!
  addAlert(input: CreateAlertInputType!): AlertResponseData!
  fetchAlert(input: AlertInput!): AlertResponseData!
  updateAlert(input: UpdateAlertInput!): AlertResponseData!
  searchAlert(input: SearchAlertInput!): AlertResponseData!
  getAlertData(input: AlertReportInputType!): AlertReport!
  getDistanceReportData(input: DistanceReportInputType!): [DistanceReportResponse!]!
  getDistanceTrackPlay(input: DistanceTrackPlayInputType!): [DistanceTrackPlayResponse!]!
  viewAllDeviceMap(input: MapViewInputType!): [MapViewResponse!]!
  createDeviceGroup(input: CreateDeviceGroupInput!): DeviceGroupResponse!
  fetchDeviceGroup(input: DeviceGroupInput!): DeviceGroupResponse!
  searchDeviceGroup(input: SearchDeviceGroupInput!): DeviceGroupResponse!
  updateDeviceGroup(input: UpdateDeviceGroupInput!): DeviceGroupResponse!
  createIndustry(input: CreateIndustryInput!): IndustryResponse!
  industryListAll(input: IndustryInput!): IndustryResponse!
  searchIndustry(input: SearchIndustryInput!): IndustryResponse!
  checkIndustryExistsRecord(input: checkExitIndustryInput!): IndustryResponse!
  fetchIndustryName(input: fetchIndustryNameCodeInput!): IndustryCodeResponse!
  createCustomerModule(input: CreateCustomerModuleInput!): CustomerModuleResponse!
  customerModuleListAll(input: CustomerModuleInput!): CustomerModuleResponse!
  updateRole(input: UpdateCustomerModuleInput!): CustomerModuleResponse!
  searchCustomerModule(input: SearchInput!): CustomerModuleResponse!
  checkCustomerModuleExistsRecord(input: CustomerModuleExitsInput!): CustomerModuleResponse!
  createRole(input: CreateRoleInput!): RoleResponse!
  roleListAll(input: RoleInput!): RoleResponse!
  delete(input: UpdateRoleInput!): RoleResponse!
  searchRoles(input: SearchRolesInput!): RoleResponse!
  checkExistsRole(input: checkRoleInput!): RoleResponse!
  updateRoleData(input: UpdateRoleInput!): RoleResponse!
  createAccount(input: CreateAccountInput!): AccountResponse!
  updateAccount(input: UpdateAccountInput!): AccountResponse!
  deleteAccount(input: UpdateAccountInput!): AccountResponse!
  searchAccount(input: SearchAccountInput!): AccountResponse!
  fetchAccountModuleList(input: AccountInput!): AccountResponse!
  createTripType(input: CreateTripTypeInput!): TripTypeResponse!
  tripTypeList(input: TripTypeInput!): TripTypeResponse!
  getTripType: TripResponse!
  searchTripType(input: SearchTripTypeInput!): TripTypeResponse!
  updateTripType(input: UpdateTripTypeInput!): TripTypeResponse!
  createTrip(input: CreateTripInput!): TripResponse!
  tripList(input: TripInput!): TripResponse!
  searchTrip(input: SearchTripInput!): TripResponse!
  fetchTripById(input: TripIDInput!): TripResponse!
  updateTrip(input: UpdateTripInput!): TripResponse!
  checkBattery(input: BatteryCheckInput!): BatteryResponse!
  getTripStatusMetrics(input: TripInput!): TripMetricsResponseWrapper!
  filterRecordAccountId(input: DeviceOnboardingAccountIdInput!): DeviceOnboardingResponse!
  createDeviceOnboarding(input: DeviceOnboardingInput!): DeviceOnboardingResponse!
  fetchDeviceOnboardingList(input: DeviceOnboardingFetchInput!): DeviceOnboardingResponse!
  updateDeviceOnboarding(input: UpdateDeviceOnboardingInput!): DeviceOnboardingResponse!
  bulkUploadDeviceAssignment(input: [DeviceOnboardingInput!]!): DeviceOnboardingResponse!
  deviceTransferOneToAnotherAccount(input: DeviceTransferInput!): DeviceOnboardingResponse!
  bulkDeviceTransferOneToAnotherAccount(input: BulkDeviceOnboardingInput!): DeviceOnboardingResponse!
  offlineDeviceGraph(input: DeviceOnboardingAccountIdInput!): DeviceOfflineGraphData!
  onlineDeviceGraph(input: DeviceOnboardingAccountIdInput!): DeviceOfflineGraphData!
  lineGraphDeviceData(input: DeviceOnboardingAccountIdInput!): DeviceLineGraphData!
  batteryGraphDataData(input: GetBatteryPercentageGraphInput!): DeviceLineGraphData!
  speedGraphData(input: GetBatteryPercentageGraphInput!): DeviceLineGraphData!
  getOnlineOfflineCount(input: DeviceOnboardingAccountIdInput!): DeviceOnlineOfflineCount!
  getImeiList(input: DeviceOnboardingAccountIdInput!): ImeiListResponse!
  fetchDeviceOnboardingListWithLocation(input: DeviceOnboardingFetchInput!): DeviceOnboardingResponse!
  createDeviceOnboardingHistory(input: DeviceOnboardingHistoryInput!): DeviceOnboardingHistoryResponse!
  fetchDeviceOnboardingHistoryList(input: DeviceOnboardingHistoryFetchInput!): DeviceOnboardingHistoryResponse!
  createDeviceSimHistory(input: DeviceSimHistoryInput!): DeviceSimHistoryResponse!
  fetchDeviceSimHistoryList(input: DeviceSimHistoryFetchInput!): DeviceSimHistoryResponse!
  loginActivityListAll(input: LoginActivityFetchInput!): LoginActivityResponse!
  logoutUser(input: LogoutInput!): String!
  searchLoginActivity(input: SearchLoginActivityInput!): LoginActivityResponse!
  addEntityType(input: CreateEntityTypeInput!): EntityTypeResponse!
  fetchEntityType(input: EntityTypeInput!): EntityTypeResponse!
  searchEntity(input: SearchEntityInput!): EntityTypeResponse!
  addEntitesType(input: CreateEntitesInput!): EntitesResponse!
  fetchEntitesType(input: EntitesTypeInput!): EntitesResponse!
  fetchEntityByTripTypeAndType(input: EntitesTypeInput!): EntitesResponse!
  searchEntites(input: SearchEntitesInput!): EntitesResponse!
  addUserAccess(input: CreateUserAccessInput!): UserAccessResponse!
  fetchUserAccess(input: UserAccessInput!): UserAccessResponse!
  searchUserAccess(input: SearchUserAccessInput!): UserAccessResponse!
  createDeviceModel(input: CreateDeviceModelInput!): DeviceModelResponse!
  updateDeviceModel(input: UpdateDeviceModelInput!): DeviceModelResponse!
  deleteDeviceModel(input: UpdateDeviceModelInput!): DeviceModelResponse!
  searchDeviceModel(input: SearchDeviceModel!): DeviceModelResponse!
  checkDeviceModelExistsRecord(input: checkDeviceModelInput!): DeviceModelResponse!
  fetchDeviceModel(input: DeviceModelInput!): DeviceModelResponse!
  addDeviceList(input: CreateAddDeviceInput!): AddDeviceResponse!
  fetchDeviceList(input: AddDeviceInput!): AddDeviceResponse!
  searchDeviceList(input: SearchAddDeviceInput!): AddDeviceResponse!
  updateDeviceList(input: UpdateAddDeviceInput!): AddDeviceResponse!
  bulkUploadDevice(input: [CreateAddDeviceInput!]!): AddDeviceResponse!
  createMenuItem(input: CreateMenuItemInput!): MenuItemResponse!
  addLocationType(input: CreateLocationTypeInput!): LocationTypeResponse!
  fetchLocationType(input: LocationTypeInput!): LocationTypeResponse!
  updateLocationType(input: UpdateLocationTypeInput!): LocationTypeResponse!
  searchLocationTypes(input: SearchLocationsInput!): LocationTypeResponse!
  addFormBuilder(input: CreateFormBuilderInput!): FormBuilderResponse!
  fetchFormBuilder(input: FormBuildInput!): FormBuilderResponse!
  updateFormBuilder(input: UpdateFormBuilderInput!): FormBuilderResponse!
}

input ChangePasswordInput {
  email: String
  password: String
}

input LoginUserInput {
  password: String
  email: String
}

input UserInput {
  page: Int
  limit: Int
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  mobileNumber: String
  userName: String
  password: String
  avatar: String
  active: Boolean = false
  emailVerified: Boolean = true
  isAccountAdmin: Boolean = false
  isSuperAdmin: Boolean = false
  mobileVerified: Boolean = true
  accountId: String
  deviceGroup: JSON
  imeiList: [String!]
  roleId: String
  parentUserId: String
  industryType: String
  mainParentId: String
  status: String = "Active"
  createdBy: String
  roleName: String
  accountName: String
  _id: String!
}

input SearchUsersInput {
  search: String
  page: Int
  limit: Int
}

input OtpInput {
  mobileNumber: Float
}

input VerifyOtpInput {
  mobileNumber: Float!
  otp: String
}

input AccountIdInput {
  accountId: String
}

input CreateAssertAssingmentModuleInput {
  imei: Float!
  labelName: String!
  journey: String
  boxSet: String
  createdBy: String
  updatedBy: String
}

input UpdateAssertAssingmentModuleInput {
  imei: Float
  labelName: String
  journey: String
  boxSet: String
  createdBy: String
  updatedBy: String
  _id: String!
}

input SearchAssertAssingmentModuleInput {
  search: String
  page: Int
  limit: Int
}

input CheckAssertAssingmentModuleInput {
  imei: Float
}

input AssertAssingmentModuleInput {
  page: Int
  limit: Int
}

input CreateGeoZoneInput {
  locationId: String
  accountId: String
  name: String
  description: String
  locationType: String
  mobileNumber: Float
  address: AddressType
  finalAddress: String
  geoCodeData: GeoJsonData
  createdBy: String
}

input AddressType {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

input GeoJsonData {
  type: String!
  geometry: GeoJsonGeometry!
  properties: PropertyType!
}

input GeoJsonGeometry {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

input PropertyType {
  name: String
}

input GeozoneInput {
  accountId: String
  page: Int
  limit: Int
}

input UpdateGeozoneInput {
  locationId: String
  accountId: String
  name: String
  description: String
  locationType: String
  mobileNumber: Float
  address: AddressType
  finalAddress: String
  geoCodeData: GeoJsonData
  createdBy: String
  _id: String!
}

input CreateRouteInput {
  accountId: String
  routeId: String
  routeName: String
  routesData: [String!]
  createdBy: String
  totalDistance: Float
  totalDuration: Float
}

input RouteInput {
  accountId: String
  page: Int
  limit: Int
}

input UpdateRouteInput {
  accountId: String
  routeId: String
  routeName: String
  routesData: [String!]
  createdBy: String
  totalDistance: Float
  totalDuration: Float
  _id: String!
}

input SearchRouteInput {
  accountId: String
  search: String!
  page: Int
  limit: Int
}

input CreateAlertInputType {
  accountId: String
  alertName: String
  mobileNo: String
  alertConfig: AlertConfigData
  isAllSystemAlert: Boolean = false
  isAlertDisable: Boolean = true
  createdBy: String
}

input AlertConfigData {
  alertImeiGroup: AlertImei
  userSelectedImei: [String!]
  alertData: [AlertConfig!]
}

input AlertImei {
  deviceGroupName: String
  deviceGroupId: String
  imei: [String!]
}

input AlertConfig {
  event: String
  location: JSON
  isAlreadyGenerateAlert: Boolean = false
  startDate: String
  endDate: String
  startAlertTime: String
  endAlertTime: String
}

input AlertInput {
  accountId: String
  page: Int
  limit: Int
}

input UpdateAlertInput {
  accountId: String
  alertName: String
  mobileNo: String
  alertConfig: AlertConfigData
  isAllSystemAlert: Boolean = false
  isAlertDisable: Boolean = true
  createdBy: String
  _id: String!
}

input SearchAlertInput {
  accountId: String
  search: String
  page: Int
  limit: Int
}

input AlertReportInputType {
  accountId: String!
  page: Int
  limit: Int
  startDate: String!
  endDate: String!
}

input DistanceReportInputType {
  accountId: String!
  startDate: String!
  endDate: String!
}

input DistanceTrackPlayInputType {
  accountId: String!
  imei: String!
  startDate: String!
  endDate: String!
}

input MapViewInputType {
  accountId: String!
}

input CreateDeviceGroupInput {
  deviceGroupName: String
  accountId: String
  imeiData: [String!]
  createdBy: String
  updatedBy: String
}

input DeviceGroupInput {
  accountId: String
  page: Int
  limit: Int
}

input SearchDeviceGroupInput {
  accountId: String
  search: String
  page: Int
  limit: Int
}

input UpdateDeviceGroupInput {
  deviceGroupName: String
  accountId: String
  imeiData: [String!]
  createdBy: String
  updatedBy: String
  _id: String!
}

input CreateIndustryInput {
  name: String
  code: [String!]
  description: String
  file: Upload
}

"""File upload scalar type"""
scalar Upload

input IndustryInput {
  page: Int
  limit: Int
}

input SearchIndustryInput {
  search: String
  page: Int
  limit: Int
}

input checkExitIndustryInput {
  name: String
}

input fetchIndustryNameCodeInput {
  _id: String
}

input CreateCustomerModuleInput {
  name: String
  code: String
  description: String
}

input CustomerModuleInput {
  page: Int
  limit: Int
}

input UpdateCustomerModuleInput {
  name: String
  code: String
  description: String
  _id: String!
}

input SearchInput {
  search: String
  page: Int
  limit: Int
}

input CustomerModuleExitsInput {
  code: String
  name: String
}

input CreateRoleInput {
  name: String
  description: String
  industryType: String
  isDelete: Boolean = false
  resources: [ValuesInput!]
}

input ValuesInput {
  name: String
  permissions: [String!]
}

input RoleInput {
  page: Int
  limit: Int
}

input UpdateRoleInput {
  name: String
  description: String
  industryType: String
  isDelete: Boolean = false
  resources: [ValuesInput!]
  _id: String!
}

input SearchRolesInput {
  search: String
  page: Int
  limit: Int
}

input checkRoleInput {
  name: String
}

input CreateAccountInput {
  accountId: String
  accountLogo: String
  accountName: String!
  industryType: String
  accountPanNo: String
  accountGstNo: String
  accountAadharNo: String
  accountAddress: String!
  accountState: String
  accountCity: String
  parentId: String
  accountContactName: String!
  accountContactEmail: String!
  accountContactMobile: String
  remarks: String
  accountAuthMobile: [String!]
  accountApiKey: String
  accountConfiguration: [AccountConfigInput!]
  createdBy: String
  updatedBy: String
  isDelete: Boolean = false
  nodeSequence: Float
}

input AccountConfigInput {
  key: String
  value: String
}

input UpdateAccountInput {
  accountId: String
  accountLogo: String
  accountName: String
  industryType: String
  accountPanNo: String
  accountGstNo: String
  accountAadharNo: String
  accountAddress: String
  accountState: String
  accountCity: String
  parentId: String
  accountContactName: String
  accountContactEmail: String
  accountContactMobile: String
  remarks: String
  accountAuthMobile: [String!]
  accountApiKey: String
  accountConfiguration: [AccountConfigInput!]
  createdBy: String
  updatedBy: String
  isDelete: Boolean = false
  nodeSequence: Float
  _id: String!
}

input SearchAccountInput {
  search: String
  page: Int
  limit: Int
}

input CreateTripTypeInput {
  accountId: String
  tripName: String
  minBatteryPercentage: Float
  tripRate: Float
  gstPercentage: String
  disableField: JSON
  filtrationFelid: JSON
  createdBy: String
  updatedBy: String
}

input TripTypeInput {
  accountId: String
  tripId: String
  page: Int
  limit: Int
}

input SearchTripTypeInput {
  accountId: String
  search: String
  page: Int
  limit: Int
}

input UpdateTripTypeInput {
  accountId: String
  tripName: String
  minBatteryPercentage: Float
  tripRate: Float
  gstPercentage: String
  disableField: JSON
  filtrationFelid: JSON
  createdBy: String
  updatedBy: String
  _id: String!
}

input CreateTripInput {
  accountId: String
  tripId: String
  status: String
  primaryAccount: String
  accessAccount: [String!]
  tripStartDate: String
  tripEndDate: String
  tripData: [TripInformationDetail!]
  route: JSON
  alertConfig: JSON
  startPoint: JSON
  endPoint: JSON
  metaData: JSON
  createdBy: String
  updatedBy: String
}

input TripInformationDetail {
  imei: [String!]
  vehicleNo: String
  tripDate: String
  remarks: String
}

input TripInput {
  accountId: String
  status: String
  page: Int
  limit: Int
}

input SearchTripInput {
  accountId: String
  search: String
  page: Int
  limit: Int
}

input TripIDInput {
  accountId: String
  tripId: String
}

input UpdateTripInput {
  accountId: String
  tripId: String
  status: String
  primaryAccount: String
  accessAccount: [String!]
  tripStartDate: String
  tripEndDate: String
  tripData: [TripInformationDetail!]
  route: JSON
  alertConfig: JSON
  startPoint: JSON
  endPoint: JSON
  metaData: JSON
  createdBy: String
  updatedBy: String
  _id: String!
}

input BatteryCheckInput {
  accountId: String
  imei: String
  threshold: Int
}

input DeviceOnboardingAccountIdInput {
  accountId: String
}

input DeviceOnboardingInput {
  accountId: String
  location: String
  deviceName: String
  deviceOnboardingSimNo: [String!]
  deviceOnboardingIMEINumber: String
  businessModel: String
  accountTransferBy: String
  createdBy: String
  updatedBy: String
}

input DeviceOnboardingFetchInput {
  accountId: String
  page: Int
  limit: Int
  location: String
}

input UpdateDeviceOnboardingInput {
  accountId: String
  location: String
  deviceName: String
  deviceOnboardingSimNo: [String!]
  deviceOnboardingIMEINumber: String
  businessModel: String
  accountTransferBy: String
  createdBy: String
  updatedBy: String
  _id: String!
}

input DeviceTransferInput {
  fromAccountId: String
  imei: String
  toAccountId: String
  accountTransferBy: String
}

input BulkDeviceOnboardingInput {
  fromAccountId: String
  imei: [String!]
  toAccountId: String
  accountTransferBy: String
}

input GetBatteryPercentageGraphInput {
  accountId: String
  imei: String
}

input DeviceOnboardingHistoryInput {
  deviceOnboardingAccount: String
  deviceOnboardingSimNo: [String!]!
  deviceOnboardingIMEINumber: Float
  deviceOnboardingDate: DateTime
  deviceDeboardingDate: DateTime
  createdBy: String
  updatedBy: String
}

input DeviceOnboardingHistoryFetchInput {
  page: Int
  limit: Int
}

input DeviceSimHistoryInput {
  deviceOnboardingSimNo: [String!]!
  deviceOnboardingIMEINumber: Float
  fromDate: DateTime
  toDate: DateTime
  createdBy: String
  updatedBy: String
}

input DeviceSimHistoryFetchInput {
  page: Int
  limit: Int
}

input LoginActivityFetchInput {
  page: Int
  limit: Int
}

input LogoutInput {
  _id: String
}

input SearchLoginActivityInput {
  search: String
  page: Int
  limit: Int
}

input CreateEntityTypeInput {
  accountId: String!
  name: String!
  description: String!
  createdBy: String!
}

input EntityTypeInput {
  accountId: String!
  page: Int
  limit: Int
}

input SearchEntityInput {
  accountId: String!
  search: String
  page: Int
  limit: Int
}

input CreateEntitesInput {
  accountId: String!
  tripTypeList: [String!]
  name: String
  type: String
  address: String
  city: String
  state: String!
  area: String!
  district: String!
  pinCode: String!
  contactName: String!
  contactEmail: String!
  contactPhone: String!
  gstIn: String!
  aadharCardNo: String!
  createdBy: String!
}

input EntitesTypeInput {
  accountId: String!
  type: String
  tripTypeList: [String!]
  page: Int
  limit: Int
}

input SearchEntitesInput {
  accountId: String!
  search: String
  page: Int
  limit: Int
}

input CreateUserAccessInput {
  accountId: String
  userId: JSON
  deviceGroup: [String!]
  entites: [String!]
  devicesImei: [String!]
  createdBy: String
  updatedBy: String
}

input UserAccessInput {
  accountId: String
  page: Int
  limit: Int
}

input SearchUserAccessInput {
  accountId: String
  search: String
  page: Int
  limit: Int
}

input CreateDeviceModelInput {
  deviceId: String
  deviceModelName: String!
  deviceModel: String!
  deviceModelType: String
  deviceModelIpAddress: String!
  deviceModelPortNumber: Float!
  deviceModelSimCount: Float!
  deviceModelNetworkType: String!
  deviceModelParser: String!
  deviceModelCommands: [CreateDeviceModelCommandInput!]
  deviceModelConfig: [CreateDeviceModelValuesInput!]
  isDelete: Boolean = false
  createdBy: String
  updatedBy: String
}

input CreateDeviceModelCommandInput {
  key: String
  value: String!
}

input CreateDeviceModelValuesInput {
  key: String
  value: String!
}

input UpdateDeviceModelInput {
  deviceId: String
  deviceModelName: String
  deviceModel: String
  deviceModelType: String
  deviceModelIpAddress: String
  deviceModelPortNumber: Float
  deviceModelSimCount: Float
  deviceModelNetworkType: String
  deviceModelParser: String
  deviceModelCommands: [CreateDeviceModelCommandInput!]
  deviceModelConfig: [CreateDeviceModelValuesInput!]
  isDelete: Boolean = false
  createdBy: String
  updatedBy: String
  _id: String!
}

input SearchDeviceModel {
  search: String
  page: Int
  limit: Int
}

input checkDeviceModelInput {
  deviceModelName: String
}

input DeviceModelInput {
  page: Int
  limit: Int
}

input CreateAddDeviceInput {
  imei: String
  deviceModelCode: String
  createdBy: String
  updatedBy: String
}

input AddDeviceInput {
  page: Int
  limit: Int
}

input SearchAddDeviceInput {
  search: String
  page: Int
  limit: Int
}

input UpdateAddDeviceInput {
  imei: String
  deviceModelCode: String
  createdBy: String
  updatedBy: String
  _id: String!
}

input CreateMenuItemInput {
  icon: String!
  activeIcon: String!
  text: String!
  link: String!
  pageName: String!
  visibleInSidebar: Boolean!
  accessToResource: [String!]
  subMenu: [CreateMenuItemInput!]
}

input CreateLocationTypeInput {
  accountId: String
  type: String!
  createdBy: String!
}

input LocationTypeInput {
  accountId: String
  page: Int
  limit: Int
}

input UpdateLocationTypeInput {
  accountId: String
  type: String
  createdBy: String
  _id: String!
}

input SearchLocationsInput {
  accountId: String
  search: String
  page: Int
  limit: Int
}

input CreateFormBuilderInput {
  formId: Int
  accountId: String
  name: String
  description: String
  content: JSON
  createdBy: String
  updatedBy: String
  published: Boolean
}

input FormBuildInput {
  accountId: String
  page: Int
  limit: Int
}

input UpdateFormBuilderInput {
  formId: Float!
  accountId: String
  name: String
  description: String
  content: JSON
  createdBy: String
  updatedBy: String
  published: Boolean
}
