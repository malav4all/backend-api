# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  firstName: String!
  lastName: String!
  email: String!
  mobileNumber: String!
  userName: String!
  password: String!
  createdBy: String!
  createdAt: DateTime
  updatedAt: DateTime
  otp: String!
  roleId: String
  deviceGroupId: String
  deviceGroup: String
  status: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatorInfo {
  count: Float
  currentPage: Float
  firstItem: Float
  hasMorePages: Boolean
  lastItem: Float
  lastPage: Float
  perPage: Float
  total: Float
}

type Coordinate {
  label: String!
  speed: Float!
  satellites: Float!
  gps: String!
  direction: Float!
  lat: Float!
  lng: Float!
}

type AlertResponse {
  label: String
  event: String
  imei: String
  message: String
  lat: String
  lng: String
  mode: String
  source: String
}

type UserResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [User!]!
}

type LoginResponse {
  data: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type OtpSendResponse {
  success: Float
  message: String
}

type MobileNumberExists {
  success: Float
  message: String
}

type OtpResponse {
  success: Float
  message: String
  email: String
}

type OtpLoginResponse {
  success: Float
  message: String
  data: JSON
}

type PropertyTypeAssetEntity {
  name: String
}

type GeoJsonGeometryAssetEntity {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

type GeoJsonAssetEntity {
  type: String!
  geometry: GeoJsonGeometryAssetEntity!
  properties: PropertyTypeAssetEntity
}

type AddressAssetEntityType {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

type GeozoneAsset {
  _id: String!
  name: String!
  description: String!
  locationType: String!
  mobileNumber: Float!
  address: AddressAssetEntityType!
  geoCodeData: GeoJsonAssetEntity!
  finalAddress: String!
  createdBy: String!
}

type JourneyResponseType {
  _id: String
  journeyName: String
  journeyData: [GeozoneAsset!]
  createdBy: String
  startDate: DateTime!
  endDate: DateTime!
  totalDistance: Float!
  totalDuration: Float!
}

type AssertAssingmentModuleEntity {
  _id: String
  imei: Float!
  labelName: String!
  journey: JourneyResponseType
  boxSet: String!
  createdBy: String
  updatedBy: String
}

type AssertAssingmentModuleResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [AssertAssingmentModuleEntity!]
}

type PropertyTypeEntity {
  name: String
}

type GeoJsonGeometryEntity {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

type GeoJsonEntity {
  type: String!
  geometry: GeoJsonGeometryEntity!
  properties: PropertyTypeEntity
}

type AddressEntityType {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

type Geozone {
  _id: String!
  name: String!
  description: String!
  locationType: String!
  mobileNumber: Float!
  address: AddressEntityType!
  geoCodeData: GeoJsonEntity!
  finalAddress: String!
  createdBy: String!
}

type GeozoneResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Geozone!]!
}

type LocationType {
  _id: String!
  type: String!
  createdBy: String!
}

type LocationTypeResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [LocationType!]!
}

type PropertyTypeEntityResponse {
  name: String
}

type GeoJsonGeometryEntityResponse {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

type GeoJsonEntityResponse {
  type: String!
  geometry: GeoJsonGeometryEntityResponse!
  properties: PropertyTypeEntityResponse
}

type AddressEntityTypeResponse {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

type JourneyResponse {
  _id: String
  name: String
  description: String
  locationType: String
  mobileNumber: String
  address: AddressEntityTypeResponse
  geoCodeData: GeoJsonEntityResponse
  finalAddress: String
  createdBy: String
}

type Journey {
  _id: String
  journeyName: String
  journeyData: [JourneyResponse!]
  createdBy: String
  startDate: DateTime
  endDate: DateTime
  totalDistance: Float
  totalDuration: Float
  imei: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type JourneyResponseData {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Journey!]!
}

type DashboardType {
  totalUser: Float!
  totalJourney: Float!
  ongoingJourney: Float!
}

type DashboardResponse {
  data: DashboardType!
}

type TrackPlayResponse {
  stopTime: String!
  currentTime: String!
  startTime: String!
  measurement: String!
  label: String!
  imei: String!
  direction: String!
  lat: String!
  lng: String!
}

type AlertResponseType {
  event: String
  lat: String
  imei: String
  label: String
  lng: String
  mode: String
  source: String
  message: String
  time: String
}

type AlertResponseTableData {
  paginatorInfo: PaginatorInfo
  data: [AlertResponseType!]!
}

type DeviceStatusResponse {
  time: String!
  imei: String!
  label: String!
  lat: String!
  lng: String!
  status: String!
}

type DeviceStatus {
  paginatorInfo: PaginatorInfo
  data: [DeviceStatusResponse!]!
}

type CoordinatesTypeResponse {
  latitude: String
  longitude: String
  time: String
}

type DistanceReportResponse {
  imei: String
  coordinates: [CoordinatesTypeResponse!]
}

type AlertEntityConfig {
  event: String
  location: JSON!
  isAlreadyGenerateAlert: Boolean
  startDate: String
  endDate: String
  startAlertTime: String
  endAlertTime: String
}

type AlertConfigEntityData {
  imei: [String!]
  alertData: [AlertEntityConfig!]
}

type Alert {
  _id: String!
  alertName: String
  mobileNo: String
  alertConfig: AlertConfigEntityData
  isAllSystemAlert: Boolean
  createdBy: String
}

type AlertResponseData {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [Alert!]!
}

type DeviceGroup {
  _id: String
  deviceGroupName: String!
  imeiData: [AssertAssingmentModuleEntity!]
  createdBy: String
  updateBy: String
}

type DeviceGroupResponse {
  paginatorInfo: PaginatorInfo
  success: Float
  message: String
  data: [DeviceGroup!]
}

type Query {
  createUser(input: CreateUserInput!): UserResponse!
}

input CreateUserInput {
  firstName: String
  lastName: String
  email: String
  mobileNumber: String
  userName: String
  password: String
  roleId: String
  deviceGroupId: String
  deviceGroup: String
  status: String = "Active"
  createdBy: String
}

type Mutation {
  getRowData: [TrackPlayResponse!]!
  getAlertData(input: AlertInputType!): AlertResponseTableData!
  getStatusDevice(input: AlertInputType!): DeviceStatus!
  fetchDistanceReport(input: AlertInputType!): [DistanceReportResponse!]!
  getAllStatusDevice: DeviceStatus!
  addUser(input: CreateUserInput!): UserResponse!
  forgetPassword(input: ChangePasswordInput!): UserResponse!
  changePassword(input: ChangePasswordInput!): UserResponse!
  loginUser(input: LoginUserInput!): LoginResponse!
  userListAll(input: UserInput!): UserResponse!
  updateUser(input: UpdateUserInput!): UserResponse!
  deleteUser(input: UpdateUserInput!): UserResponse!
  searchUsers(input: SearchUsersInput!): UserResponse!
  refreshToken: String!
  mobileNumberExists(input: OtpInput!): MobileNumberExists!
  verifyOtp(input: VerifyOtpInput!): OtpResponse!
  sendOtp(input: OtpInput!): OtpSendResponse!
  verifyOtpLogin(input: VerifyOtpInput!): OtpLoginResponse!
  createAssertAssingmentModule(input: CreateAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  updateAssertAssingmentModule(input: UpdateAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  deleteAssertAssingmentModule(input: UpdateAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  searchAssertAssingmentModule(input: SearchAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  checkAssertAssingmentModuleExistsRecord(input: CheckAssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  fetchAssertAssingmentModule(input: AssertAssingmentModuleInput!): AssertAssingmentModuleResponse!
  bulkJourneyUpload(input: [CreateAssertAssingmentModuleInput!]!): AssertAssingmentModuleResponse!
  getAllDeviceList: [AssertAssingmentModuleEntity!]!
  addGeozone(input: CreateGeoZoneInput!): GeozoneResponse!
  listGeozone(input: GeozoneInput!): GeozoneResponse!
  updateGeozone(input: UpdateGeozoneInput!): GeozoneResponse!
  addLocationType(input: CreateLocationTypeInput!): LocationTypeResponse!
  fetchLocationType(input: LocationTypeInput!): LocationTypeResponse!
  searchLocations(input: SearchLocationsInput!): LocationTypeResponse!
  addJourney(input: CreateJourneyInput!): JourneyResponseData!
  fetchJourney(input: JourneyInput!): JourneyResponseData!
  updateJourney(input: UpdateJourneyInput!): JourneyResponseData!
  searchJourneys(input: SearchJourneysInput!): JourneyResponseData!
  archiveJourney: JourneyResponseData!
  upComingJourney: JourneyResponseData!
  fetchDashboardDetail: DashboardResponse!
  addAlert(input: CreateAlertInputType!): AlertResponseData!
  fetchAlert(input: AlertInput!): AlertResponseData!
  updateAlert(input: UpdateAlertInput!): AlertResponseData!
  createDeviceGroup(input: CreateDeviceGroupInput!): DeviceGroupResponse!
  fetchDeviceGroup(input: DeviceGroupInput!): DeviceGroupResponse!
  searchDeviceGroup(input: SearchDeviceGroupInput!): DeviceGroupResponse!
  updateDeviceGroup(input: UpdateDeviceGroupInput!): DeviceGroupResponse!
}

input AlertInputType {
  page: Int
  limit: Int
  startDate: String!
  endDate: String!
}

input ChangePasswordInput {
  email: String
  password: String
}

input LoginUserInput {
  password: String
  email: String
}

input UserInput {
  page: Int
  limit: Int
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  mobileNumber: String
  userName: String
  password: String
  roleId: String
  deviceGroupId: String
  deviceGroup: String
  status: String = "Active"
  createdBy: String
  _id: String!
}

input SearchUsersInput {
  search: String
  page: Int
  limit: Int
}

input OtpInput {
  mobileNumber: Float
}

input VerifyOtpInput {
  mobileNumber: Float!
  otp: String
}

input CreateAssertAssingmentModuleInput {
  imei: Float!
  labelName: String!
  journey: String
  boxSet: String
  createdBy: String
  updatedBy: String
}

input UpdateAssertAssingmentModuleInput {
  imei: Float
  labelName: String
  journey: String
  boxSet: String
  createdBy: String
  updatedBy: String
  _id: String!
}

input SearchAssertAssingmentModuleInput {
  search: String
  page: Int
  limit: Int
}

input CheckAssertAssingmentModuleInput {
  imei: Float
}

input AssertAssingmentModuleInput {
  page: Int
  limit: Int
}

input CreateGeoZoneInput {
  name: String
  description: String
  locationType: String
  mobileNumber: Float
  address: AddressType
  finalAddress: String
  geoCodeData: GeoJsonData
  createdBy: String
}

input AddressType {
  zipCode: String
  country: String
  state: String
  area: String
  city: String
  district: String
}

input GeoJsonData {
  type: String!
  geometry: GeoJsonGeometry!
  properties: PropertyType!
}

input GeoJsonGeometry {
  type: String!
  coordinates: [Float!]!
  radius: Float!
}

input PropertyType {
  name: String
}

input GeozoneInput {
  page: Int
  limit: Int
}

input UpdateGeozoneInput {
  name: String
  description: String
  locationType: String
  mobileNumber: Float
  address: AddressType
  finalAddress: String
  geoCodeData: GeoJsonData
  createdBy: String
  _id: String!
}

input CreateLocationTypeInput {
  type: String!
  createdBy: String!
}

input LocationTypeInput {
  page: Int
  limit: Int
}

input SearchLocationsInput {
  search: String
  page: Int
  limit: Int
}

input CreateJourneyInput {
  journeyName: String
  journeyData: [String!]
  createdBy: String
  startDate: DateTime!
  endDate: DateTime!
  totalDistance: Float
  totalDuration: Float
}

input JourneyInput {
  page: Int
  limit: Int
}

input UpdateJourneyInput {
  journeyName: String
  journeyData: [String!]
  createdBy: String
  startDate: DateTime
  endDate: DateTime
  totalDistance: Float
  totalDuration: Float
  _id: String!
}

input SearchJourneysInput {
  search: String!
  page: Int
  limit: Int
}

input CreateAlertInputType {
  alertName: String
  mobileNo: String
  alertConfig: AlertConfigData
  isAllSystemAlert: Boolean = false
  createdBy: String
}

input AlertConfigData {
  imei: [String!]
  alertData: [AlertConfig!]
}

input AlertConfig {
  event: String
  location: JSON
  isAlreadyGenerateAlert: Boolean = false
  startDate: String
  endDate: String
  startAlertTime: String
  endAlertTime: String
}

input AlertInput {
  page: Int
  limit: Int
}

input UpdateAlertInput {
  alertName: String
  mobileNo: String
  alertConfig: AlertConfigData
  isAllSystemAlert: Boolean = false
  createdBy: String
  _id: String!
}

input CreateDeviceGroupInput {
  deviceGroupName: String
  imeiData: [String!]
  createdBy: String
  updatedBy: String
}

input DeviceGroupInput {
  page: Int
  limit: Int
}

input SearchDeviceGroupInput {
  search: String
  page: Int
  limit: Int
}

input UpdateDeviceGroupInput {
  deviceGroupName: String
  imeiData: [String!]
  createdBy: String
  updatedBy: String
  _id: String!
}

type Subscription {
  coordinatesUpdated(topic: String!): Coordinate!
  alertUpdated(topic: String!): AlertResponse!
}
